// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Drug {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  presentations Presentation[]
}

model Presentation {
  id            Int            @id @default(autoincrement())
  name          String
  drugId        Int
  drug          Drug           @relation(fields: [drugId], references: [id])
  prescriptions Prescription[]
}

model User {
  id         Int         @id @default(autoincrement())
  uid        String?     @unique
  name       String
  lastName   String
  email      String
  dni        Int
  doctor     Doctor?
  pharmacist Pharmacist?
}

model Patient {
  id                 Int              @id @default(autoincrement())
  doctor             Doctor?          @relation(fields: [doctorId], references: [id])
  doctorId           Int?
  name               String
  lastName           String
  dni                Int
  email              String
  birthDate          DateTime
  insuranceCompanyId Int
  insuranceCompany   InsuranceCompany @relation(fields: [insuranceCompanyId], references: [id])
  sex                Sex
  affiliateNumber    Int
  prescriptions      Prescription[]
  patientNotes       PatientNote[]
}

model Doctor {
  id                 Int            @id @default(autoincrement())
  license            String
  user               User           @relation(fields: [userId], references: [id])
  userId             Int            @unique
  specialtyId        Int
  specialty          Specialty      @relation(fields: [specialtyId], references: [id])
  prescriptions      Prescription[]
  patients           Patient[]
  doctorNodes        DoctorNode[]
  certificateRequest String
  certificate        String
}

model Specialty {
  id     Int      @id @default(autoincrement())
  name   String
  doctor Doctor[]
}

model Prescription {
  id                Int                @id @default(autoincrement())
  presentationId    Int
  presentation      Presentation       @relation(fields: [presentationId], references: [id])
  indication        String
  patient           Patient            @relation(fields: [patientId], references: [id])
  patientId         Int
  doctor            Doctor             @relation(fields: [doctorId], references: [id])
  doctorId          Int
  quantity          Int
  emitedAt          DateTime
  prescriptionNodes PrescriptionNode[]
  signature         String
}

model Pharmacist {
  id      Int    @id @default(autoincrement())
  license String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @unique
}

enum ChildSide {
  LEFT
  RIGHT
}

model PrescriptionNode {
  id           Int                @id @default(autoincrement())
  parent_id    Int?
  parent       PrescriptionNode?  @relation("ParentChildren", fields: [parent_id], references: [id])
  children     PrescriptionNode[] @relation("ParentChildren")
  side         ChildSide?
  hash         String
  key          Int?
  prescription Prescription?      @relation(fields: [key], references: [id])

  // Unique constraint for parent_id and side
  @@unique(name: "unique_parent_side", [parent_id, side])
}

model DoctorNode {
  id        Int          @id @default(autoincrement())
  parent_id Int?
  parent    DoctorNode?  @relation("ParentChildren", fields: [parent_id], references: [id])
  children  DoctorNode[] @relation("ParentChildren")
  side      ChildSide?
  hash      String
  key       Int?
  doctor    Doctor?      @relation(fields: [key], references: [id])

  // Unique constraint for parent_id and side
  @@unique(name: "unique_parent_side", [parent_id, side])
}

model InsuranceCompany {
  id      Int       @id @default(autoincrement())
  name    String
  patient Patient[]
}

model PatientNote {
  id        Int       @id @default(autoincrement())
  patient   Patient   @relation(fields: [patientId], references: [id])
  patientId Int
  note      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum Sex {
  MALE
  FEMALE
  OTHER
}
